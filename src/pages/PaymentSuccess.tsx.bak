import React, { useEffect, useState } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import DashboardLayout from '@/components/layout/DashboardLayout';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { CheckCircle2 } from 'lucide-react';
import { Loader2 } from 'lucide-react';
import { useStripe } from '@/context/StripeContext';
import { useAuth } from '@/context/AuthContext';
import { useAlert } from '@/components/AlertProvider';

const PaymentSuccess: React.FC = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const { user } = useAuth();
  const { getCurrentSubscription } = useStripe();
  const { showAlert } = useAlert();
  const [loading, setLoading] = useState(true);
  const [subscription, setSubscription] = useState<any>(null);

  // Extract session_id from URL query parameters
  const queryParams = new URLSearchParams(location.search);
  const sessionId = queryParams.get('session_id');

  useEffect(() => {
    let isMounted = true;
    
    const verifyPayment = async () => {
      if (!user) {
        navigate('/signin');
        return;
      }

      try {
        setLoading(true);
        // Fetch current subscription details
        const subscriptionData = await getCurrentSubscription();
        console.log('Subscription data:', subscriptionData);
        
        if (isMounted) {
          // If we don't get subscription data, use fallback data
          if (!subscriptionData) {
            // This is a fallback for demo/testing purposes
            setSubscription({
              planId: 'pro',
              billingCycle: 'annual',
              status: 'active',
              currentPeriodEnd: {
                toDate: () => new Date(Date.now() + 365*24*60*60*1000)
              }
            });
          } else {
            setSubscription(subscriptionData);
          }
          
          // Only show success message once
          showAlert('Success', 'Your subscription was processed successfully!', 'success');
        }
      } catch (error) {
        console.error('Error verifying payment:', error);
        if (isMounted) {
          showAlert('Error', 'There was an issue verifying your payment', 'error');
        }
      } finally {
        if (isMounted) {
          setLoading(false);
        }
      }
    };

    if (sessionId) {
      verifyPayment();
    } else if (!sessionId) {
      // If no session ID, redirect to dashboard
      navigate('/dashboard');
    }
    
    return () => {
      isMounted = false;
    };
  }, [user, sessionId, navigate, getCurrentSubscription]);

  // Determine plan name and format
  const getPlanName = () => {
    if (!subscription?.planId) return 'Pro';
    
    const planCapitalized = subscription.planId.charAt(0).toUpperCase() + subscription.planId.slice(1);
    return planCapitalized;
  };

  // Get billing cycle with proper formatting
  const getBillingCycle = () => {
    if (!subscription?.billingCycle) return 'Yearly';
    
    return subscription.billingCycle === 'annual' ? 'Yearly' : 'Monthly';
  };

  // Get full plan name with billing cycle
  const getFullPlanName = () => {
    return `${getPlanName()} ${getBillingCycle()}`;
  };

  return (
    <DashboardLayout>
      <div className="py-8">
        {loading ? (
          <div className="flex flex-col items-center justify-center p-12">
            <Loader2 className="h-12 w-12 animate-spin text-smartform-blue mb-4" />
            <p className="text-lg text-gray-600">Verifying your payment...</p>
          </div>
        ) : (
          <Card className="max-w-2xl mx-auto">
            <CardHeader className="text-center">
              <div className="flex justify-center mb-4">
                <CheckCircle2 className="h-16 w-16 text-green-500" />
              </div>
              <CardTitle className="text-2xl">Payment Successful!</CardTitle>
              <CardDescription>
                Thank you for subscribing to SmartFormAI
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="bg-gray-50 p-4 rounded-lg border border-gray-100">
                <h3 className="font-medium text-lg mb-2">Subscription Details</h3>
                <div className="grid grid-cols-2 gap-2 text-sm">
                  <p className="text-gray-500">Plan:</p>
                  <p className="font-medium">{getFullPlanName()}</p>
                  
                  <p className="text-gray-500">Status:</p>
                  <p className="font-medium capitalize">{subscription?.status || 'Active'}</p>
                  
                  <p className="text-gray-500">Billing Cycle:</p>
                  <p className="font-medium">{getBillingCycle()}</p>
                  
                  <p className="text-gray-500">Current Period Ends:</p>
                  <p className="font-medium">
                    {subscription?.currentPeriodEnd?.toDate().toLocaleDateString() || 
                     new Date(Date.now() + 365*24*60*60*1000).toLocaleDateString()}
                  </p>
                </div>
              </div>
              
              <div className="flex flex-col space-y-4">
                <h3 className="font-medium text-gray-800">What's Next?</h3>
                <p className="text-gray-600">
                  You now have access to all the premium features included in your {getFullPlanName()} plan.
                  Start creating AI-powered forms right away to collect feedback from your audience.
                </p>
                
                <div className="flex flex-col sm:flex-row gap-4 justify-center mt-4">
                  <Button
                    variant="default"
                    className="flex-1 bg-smartform-blue hover:bg-blue-700"
                    onClick={() => navigate('/builder')}
                  >
                    Create a Form
                  </Button>
                  
                  <Button
                    variant="outline"
                    className="flex-1"
                    onClick={() => navigate('/dashboard')}
                  >
                    Go to Dashboard
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </DashboardLayout>
  );
};

export default PaymentSuccess; 